a=1
discretize.groovy=import com.google.common.base.Strings;\
import com.weibo.ba.evaluation.now.common.domain.Tag;\
import com.weibo.ba.evaluation.now.common.domain.Tags;\
import com.weibo.ba.evaluation.now.common.utils.JsonUtils;\
import com.weibo.ba.evaluation.now.storm.utils.PinYinUtils;\
import java.util.Map;\
/* test */\
\
class _Discretize {\
\
    private static final AGE_MAP = [\
            /*左闭区间，右开区间，离散值*/\
            [0, 20, 20],\
            [20, 30, 30],\
            [30, 40, 40],\
            [40, 60, 60],\
            [60, -1, 100]\
    ];\
\
    private static final RATE_MAP = [\
            /*左闭区间，右开区间，离散值*/\
            [0, 0.1, 0],\
            [0.1, 0.5, 1],\
            [0.5, 0.7, 2],\
            [0.7, -1, 3],\
    ];\
\
    private static Tags DEFAULT_ONE = null;\
\
    static {\
\
        List<Tag> tagsList = new ArrayList<>();\
        tagsList.add(Tag.of("loc", "-1"));\
        tagsList.add(Tag.of("age", "-1"));\
        tagsList.add(Tag.of("wl_rate", "-1"));\
        tagsList.add(Tag.of("frequency", "-1"));\
        tagsList.add(Tag.of("gender", "-1"));\
        DEFAULT_ONE = new Tags(tagsList);\
    };\
\
    public final Tags evaluate(String features) {\
        if (Strings.isNullOrEmpty(features)) {\
            return DEFAULT_ONE;\
        }\
        Map<String, String> featureMap = JsonUtils.fromJson(features, Map.class);\
        List<Tag> results = new ArrayList<>();\
        results.add(Tag.of("loc", PinYinUtils.toPinyin(featureMap.getOrDefault("loc", "-1"))));\
        results.add(Tag.of("age", this.discretize(AGE_MAP, featureMap.get("age"))));\
        results.add(Tag.of("wl_rate", this.discretize(RATE_MAP, featureMap.get("wl_rate"))));\
        results.add(Tag.of("frequency", String.valueOf(featureMap.getOrDefault("frequency", "-1"))));\
        results.add(Tag.of("gender", String.valueOf(featureMap.getOrDefault("gender", "-1"))));\
        return new Tags(results);\
    }\
\
    private String discretize(def ranges, def value) {\
        if (null == value) {\
            return "-1";\
        }\
        for (def range : ranges) {\
            if (Double.compare(value, range[0]) >= 0 || Double.compare(value, range[1]) || -1 == range[1]) {\
                return String.valueOf(range[2]);\
                break;\
            }\
        }\
        return "-1";\
    }\
};\
\
new _Discretize();\


split.groovy=class TrafficSplit {\
\
    String evaluate(String uid) {\
        if (uid.length() < 6) {\
            return "0";\
        } else {\
            char charAt4 = uid.charAt(4);\
            char charAt5 = uid.charAt(5);\
            if (charAt4.equals("2")) {\
                return "baseClean";\
            } else if (charAt4.equals("7")) {\
                return "dpPart1";\
            } else if (charAt4.equals("4") && "01234".contains(charAt5)) {\
                return "l3tag";\
            } else {\
                return "base";\
            }\
        }\
\
    }\
};\
\
new TrafficSplit();\
